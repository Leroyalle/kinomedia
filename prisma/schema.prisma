generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id Int @id @default(autoincrement())

  fullName String
  email    String
  password String
  image    String?

  completedSubscription CompletedSubscription[]
  selectedMedia         SelectedMedia[]

  verified         DateTime?
  verificationCode VerificationCode?

  provider   String?
  providerId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscription {
  id Int @id @default(autoincrement())

  monthCount    Int
  pricePerMonth Int

  completedSubscription CompletedSubscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CompletedSubscription {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  subscriptionId Int

  expires      DateTime
  activeStatus ActiveStatusEnum

  paymentStatus PaymentStatusEnum

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SelectedMedia {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  mediaId      Int
  name         String
  previewUrl   String
  year         Int
  movieLength  Int?
  seriesLength Int?
  ratingKp     Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, mediaId])
}

model VerificationCode {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  code String

  createdAt DateTime @default(now())

  @@unique([userId, code])
}

enum PaymentStatusEnum {
  PENDING
  SUCCEEDED
  CANCELLED
}

enum ActiveStatusEnum {
  ACTIVE
  EXPIRES
  CANCELLED
}
